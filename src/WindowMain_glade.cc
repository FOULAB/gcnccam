// generated 2008/4/15 15:29:59 CEST by abegeman@sonyx.(none)
// using glademm V2.6.0
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- /home/abegeman/projects/c_projekt/gcnccam/gcnccam.glade
// for gtk 2.8.20 and gtkmm 2.8.8
//
// Please modify the corresponding derived classes in ./src/WindowMain.cc


#if defined __GNUC__ && __GNUC__ < 3
#error This program will crash if compiled with g++ 2.x
// see the dynamic_cast bug in the gtkmm FAQ
#endif //
#include "config.h"
/*
 * Standard gettext macros.
 */
#ifdef ENABLE_NLS
#  include <libintl.h>
#  undef _
#  define _(String) dgettext (GETTEXT_PACKAGE, String)
#  ifdef gettext_noop
#    define N_(String) gettext_noop (String)
#  else
#    define N_(String) (String)
#  endif
#else
#  define textdomain(String) (String)
#  define gettext(String) (String)
#  define dgettext(Domain,Message) (Message)
#  define dcgettext(Domain,Message,Type) (Message)
#  define bindtextdomain(Domain,Directory) (Domain)
#  define _(String) (String)
#  define N_(String) (String)
#endif
#include <gtkmmconfig.h>
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#define GMM_GTKMM_22_24(a,b) b
#else //gtkmm 2.2
#define GMM_GTKMM_22_24(a,b) a
#endif //
#include <sigc++/functors/mem_fun.h>
#include "WindowMain_glade.hh"
#include <gdk/gdkkeysyms.h>
#include <gtkmm/accelgroup.h>
#include <gtk/gtkimagemenuitem.h>
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#endif //

WindowMain_glade::WindowMain_glade(
) : Gtk::Window(Gtk::WINDOW_TOPLEVEL)
{  WindowMain = this;
   gmm_data = new GlademmData(get_accel_group());
   open_template = NULL;
   save_template = NULL;
   separator2 = NULL;
   open_drawing = NULL;
   separator3 = NULL;
   save_cnc_file = NULL;
   separator4 = NULL;
   export_tool_file1 = NULL;
   separatormenuitem2 = NULL;
   quit1 = NULL;
   menuitem_file_menu = Gtk::manage(new class Gtk::Menu());
   menuitem_file = NULL;
   save_template_default = NULL;
   settings = NULL;
   menu_item_edit_menu = Gtk::manage(new class Gtk::Menu());
   menu_item_edit = NULL;
   build_cnc_code = NULL;
   menuitem_build_menu = Gtk::manage(new class Gtk::Menu());
   menuitem_build = NULL;
   about = NULL;
   menuitem_help_menu = Gtk::manage(new class Gtk::Menu());
   menuitem_help = NULL;
   menubar2 = Gtk::manage(new class Gtk::MenuBar());
   image48 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-open"), Gtk::IconSize(4)));
   button_open_drawing = Gtk::manage(new class Gtk::Button());
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem14 = Gtk::manage(new class Gtk::ToolItem());
#endif //
   image30 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-save"), Gtk::IconSize(4)));
   button_save_cnc_code = Gtk::manage(new class Gtk::Button());
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem2 = Gtk::manage(new class Gtk::ToolItem());
#endif //
   image31 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-media-record"), Gtk::IconSize(4)));
   button_build_cnc = Gtk::manage(new class Gtk::Button());
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem3 = Gtk::manage(new class Gtk::ToolItem());
#endif //
   vseparator1 = Gtk::manage(new class Gtk::VSeparator());
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem5 = Gtk::manage(new class Gtk::ToolItem());
#endif //
   vseparator2 = Gtk::manage(new class Gtk::VSeparator());
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem8 = Gtk::manage(new class Gtk::ToolItem());
#endif //
   button_layerprop_add = Gtk::manage(new class Gtk::Button());
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem9 = Gtk::manage(new class Gtk::ToolItem());
#endif //
   button_layerprop_del = Gtk::manage(new class Gtk::Button());
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem10 = Gtk::manage(new class Gtk::ToolItem());
#endif //
   vseparator3 = Gtk::manage(new class Gtk::VSeparator());
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem11 = Gtk::manage(new class Gtk::ToolItem());
#endif //
   button_tool_add = Gtk::manage(new class Gtk::Button());
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem12 = Gtk::manage(new class Gtk::ToolItem());
#endif //
   button_tool_del = Gtk::manage(new class Gtk::Button());
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem15 = Gtk::manage(new class Gtk::ToolItem());
#endif //
   toolbar = Gtk::manage(new class Gtk::Toolbar());
   tree_layers = Gtk::manage(new class Gtk::TreeView());
   scrolledwindow5 = Gtk::manage(new class Gtk::ScrolledWindow());
   label6 = Gtk::manage(new class Gtk::Label(_("Drawing")));
   tree_layerprops = Gtk::manage(new class Gtk::TreeView());
   scrolledwindow6 = Gtk::manage(new class Gtk::ScrolledWindow());
   label7 = Gtk::manage(new class Gtk::Label(_("Properties")));
   tree_tools = Gtk::manage(new class Gtk::TreeView());
   scrolledwindow7 = Gtk::manage(new class Gtk::ScrolledWindow());
   label8 = Gtk::manage(new class Gtk::Label(_("Tools")));
   notebook1 = Gtk::manage(new class Gtk::Notebook());
   label29 = Gtk::manage(new class Gtk::Label(_("gcnccam")));
   alignment2 = Gtk::manage(new class Gtk::Alignment(0.5, 0.5, 1, 1));
   frame_default = Gtk::manage(new class Gtk::Frame());
   hpaned1 = Gtk::manage(new class Gtk::HPaned());
   statusbar1 = Gtk::manage(new class Gtk::Statusbar());
   vbox1 = Gtk::manage(new class Gtk::VBox(false, 0));
   
   
   menuitem_file_menu->items().push_back(Gtk::Menu_Helpers::MenuElem(_("_Open Template")));
   open_template = (Gtk::MenuItem *)&menuitem_file_menu->items().back();
   
   menuitem_file_menu->items().push_back(Gtk::Menu_Helpers::MenuElem(_("_Save Template")));
   save_template = (Gtk::MenuItem *)&menuitem_file_menu->items().back();
   
   menuitem_file_menu->items().push_back(Gtk::Menu_Helpers::SeparatorElem());
   separator2 = (Gtk::MenuItem *)&menuitem_file_menu->items().back();
   
   menuitem_file_menu->items().push_back(Gtk::Menu_Helpers::MenuElem(_("Open Drawing")));
   open_drawing = (Gtk::MenuItem *)&menuitem_file_menu->items().back();
   
   menuitem_file_menu->items().push_back(Gtk::Menu_Helpers::SeparatorElem());
   separator3 = (Gtk::MenuItem *)&menuitem_file_menu->items().back();
   
   menuitem_file_menu->items().push_back(Gtk::Menu_Helpers::MenuElem(_("Save CNC File")));
   save_cnc_file = (Gtk::MenuItem *)&menuitem_file_menu->items().back();
   
   menuitem_file_menu->items().push_back(Gtk::Menu_Helpers::SeparatorElem());
   separator4 = (Gtk::MenuItem *)&menuitem_file_menu->items().back();
   
   menuitem_file_menu->items().push_back(Gtk::Menu_Helpers::MenuElem(_("Export Tool File")));
   export_tool_file1 = (Gtk::MenuItem *)&menuitem_file_menu->items().back();
   
   menuitem_file_menu->items().push_back(Gtk::Menu_Helpers::SeparatorElem());
   separatormenuitem2 = (Gtk::MenuItem *)&menuitem_file_menu->items().back();
   
   menuitem_file_menu->items().push_back(Gtk::Menu_Helpers::StockMenuElem(Gtk::StockID("gtk-quit")));
   quit1 = (Gtk::ImageMenuItem *)&menuitem_file_menu->items().back();
   
   menu_item_edit_menu->items().push_back(Gtk::Menu_Helpers::MenuElem(_("_Save Template As Default")));
   save_template_default = (Gtk::MenuItem *)&menu_item_edit_menu->items().back();
   
   menu_item_edit_menu->items().push_back(Gtk::Menu_Helpers::MenuElem(_("Setting")));
   settings = (Gtk::MenuItem *)&menu_item_edit_menu->items().back();
   
   menuitem_build_menu->items().push_back(Gtk::Menu_Helpers::MenuElem(_("_Build CNC code")));
   build_cnc_code = (Gtk::MenuItem *)&menuitem_build_menu->items().back();
   
   menuitem_help_menu->items().push_back(Gtk::Menu_Helpers::StockMenuElem(Gtk::StockID("gtk-about")));
   about = (Gtk::ImageMenuItem *)&menuitem_help_menu->items().back();
   
   menubar2->items().push_back(Gtk::Menu_Helpers::MenuElem(_("_File"), *menuitem_file_menu));
   menuitem_file = (Gtk::MenuItem *)&menubar2->items().back();
   
   menubar2->items().push_back(Gtk::Menu_Helpers::MenuElem(_("_Edit"), *menu_item_edit_menu));
   menu_item_edit = (Gtk::MenuItem *)&menubar2->items().back();
   
   menubar2->items().push_back(Gtk::Menu_Helpers::MenuElem(_("_Build"), *menuitem_build_menu));
   menuitem_build = (Gtk::MenuItem *)&menubar2->items().back();
   
   menubar2->items().push_back(Gtk::Menu_Helpers::MenuElem(_("_Help"), *menuitem_help_menu));
   menuitem_help = (Gtk::MenuItem *)&menubar2->items().back();
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolbar->append(*toolitem14);
#else //
   toolbar->tools().push_back(Gtk::Toolbar_Helpers::Element(*button_open_drawing));
   
   Gtk::Widget *toolitem14 = toolbar->tools().back().get_widget();
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolbar->append(*toolitem2);
#else //
   toolbar->tools().push_back(Gtk::Toolbar_Helpers::Element(*button_save_cnc_code));
   
   Gtk::Widget *toolitem2 = toolbar->tools().back().get_widget();
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolbar->append(*toolitem3);
#else //
   toolbar->tools().push_back(Gtk::Toolbar_Helpers::Element(*button_build_cnc));
   
   Gtk::Widget *toolitem3 = toolbar->tools().back().get_widget();
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolbar->append(*toolitem5);
#else //
   toolbar->tools().push_back(Gtk::Toolbar_Helpers::Element(*vseparator1));
   
   Gtk::Widget *toolitem5 = toolbar->tools().back().get_widget();
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolbar->append(*toolitem8);
#else //
   toolbar->tools().push_back(Gtk::Toolbar_Helpers::Element(*vseparator2));
   
   Gtk::Widget *toolitem8 = toolbar->tools().back().get_widget();
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolbar->append(*toolitem9);
#else //
   toolbar->tools().push_back(Gtk::Toolbar_Helpers::Element(*button_layerprop_add));
   
   Gtk::Widget *toolitem9 = toolbar->tools().back().get_widget();
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolbar->append(*toolitem10);
#else //
   toolbar->tools().push_back(Gtk::Toolbar_Helpers::Element(*button_layerprop_del));
   
   Gtk::Widget *toolitem10 = toolbar->tools().back().get_widget();
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolbar->append(*toolitem11);
#else //
   toolbar->tools().push_back(Gtk::Toolbar_Helpers::Element(*vseparator3));
   
   Gtk::Widget *toolitem11 = toolbar->tools().back().get_widget();
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolbar->append(*toolitem12);
#else //
   toolbar->tools().push_back(Gtk::Toolbar_Helpers::Element(*button_tool_add));
   
   Gtk::Widget *toolitem12 = toolbar->tools().back().get_widget();
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolbar->append(*toolitem15);
#else //
   toolbar->tools().push_back(Gtk::Toolbar_Helpers::Element(*button_tool_del));
   
   Gtk::Widget *toolitem15 = toolbar->tools().back().get_widget();
#endif //
   image48->set_alignment(0.5,0.5);
   image48->set_padding(0,0);
   button_open_drawing->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*button_open_drawing, _("Load Drawing"), "");
   button_open_drawing->set_relief(Gtk::RELIEF_NORMAL);
   button_open_drawing->add(*image48);
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem14->set_visible_horizontal(true);
   toolitem14->set_visible_vertical(true);
   toolitem14->set_is_important(false);
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem14->add(*button_open_drawing);
#endif //
   image30->set_alignment(0.5,0.5);
   image30->set_padding(0,0);
   button_save_cnc_code->set_sensitive(false);
   button_save_cnc_code->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*button_save_cnc_code, _("Save CNC Code"), "");
   button_save_cnc_code->set_relief(Gtk::RELIEF_NORMAL);
   button_save_cnc_code->add(*image30);
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem2->set_visible_horizontal(true);
   toolitem2->set_visible_vertical(true);
   toolitem2->set_is_important(false);
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem2->add(*button_save_cnc_code);
#endif //
   image31->set_alignment(0.5,0.5);
   image31->set_padding(0,0);
   button_build_cnc->set_sensitive(false);
   button_build_cnc->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*button_build_cnc, _("Build CNC"), "");
   button_build_cnc->set_relief(Gtk::RELIEF_NORMAL);
   button_build_cnc->add(*image31);
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem3->set_visible_horizontal(true);
   toolitem3->set_visible_vertical(true);
   toolitem3->set_is_important(false);
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem3->add(*button_build_cnc);
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem5->set_visible_horizontal(true);
   toolitem5->set_visible_vertical(true);
   toolitem5->set_is_important(false);
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem5->add(*vseparator1);
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem8->set_visible_horizontal(true);
   toolitem8->set_visible_vertical(true);
   toolitem8->set_is_important(false);
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem8->add(*vseparator2);
#endif //
   button_layerprop_add->set_sensitive(false);
   button_layerprop_add->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*button_layerprop_add, _("Add Layer Properties"), "");
   button_layerprop_add->set_relief(Gtk::RELIEF_NORMAL);
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem9->set_visible_horizontal(true);
   toolitem9->set_visible_vertical(true);
   toolitem9->set_is_important(false);
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem9->add(*button_layerprop_add);
#endif //
   button_layerprop_del->set_sensitive(false);
   button_layerprop_del->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*button_layerprop_del, _("Delete Layer Properties"), "");
   button_layerprop_del->set_relief(Gtk::RELIEF_NORMAL);
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem10->set_visible_horizontal(true);
   toolitem10->set_visible_vertical(true);
   toolitem10->set_is_important(false);
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem10->add(*button_layerprop_del);
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem11->set_visible_horizontal(true);
   toolitem11->set_visible_vertical(true);
   toolitem11->set_is_important(false);
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem11->add(*vseparator3);
#endif //
   button_tool_add->set_sensitive(false);
   button_tool_add->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*button_tool_add, _("Add Tool"), "");
   button_tool_add->set_relief(Gtk::RELIEF_NORMAL);
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem12->set_visible_horizontal(true);
   toolitem12->set_visible_vertical(true);
   toolitem12->set_is_important(false);
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem12->add(*button_tool_add);
#endif //
   button_tool_del->set_sensitive(false);
   button_tool_del->set_flags(Gtk::CAN_FOCUS);
   _tooltips.set_tip(*button_tool_del, _("Delete Tool"), "");
   button_tool_del->set_relief(Gtk::RELIEF_NORMAL);
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem15->set_visible_horizontal(true);
   toolitem15->set_visible_vertical(true);
   toolitem15->set_is_important(false);
#endif //
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem15->add(*button_tool_del);
#endif //
   toolbar->set_tooltips(true);
   toolbar->set_toolbar_style(Gtk::TOOLBAR_ICONS);
   toolbar->set_orientation(Gtk::ORIENTATION_HORIZONTAL);
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolbar->set_show_arrow(true);
#endif //
   tree_layers->set_flags(Gtk::CAN_FOCUS);
   tree_layers->set_headers_visible(true);
   tree_layers->set_rules_hint(false);
   tree_layers->set_reorderable(false);
   tree_layers->set_enable_search(true);
   scrolledwindow5->set_flags(Gtk::CAN_FOCUS);
   scrolledwindow5->set_shadow_type(Gtk::SHADOW_IN);
   scrolledwindow5->set_policy(Gtk::POLICY_ALWAYS, Gtk::POLICY_ALWAYS);
   scrolledwindow5->property_window_placement().set_value(Gtk::CORNER_TOP_LEFT);
   scrolledwindow5->add(*tree_layers);
   label6->set_alignment(0.5,0.5);
   label6->set_padding(0,0);
   label6->set_justify(Gtk::JUSTIFY_LEFT);
   label6->set_line_wrap(false);
   label6->set_use_markup(false);
   label6->set_selectable(false);
   tree_layerprops->set_flags(Gtk::CAN_FOCUS);
   tree_layerprops->set_headers_visible(true);
   tree_layerprops->set_rules_hint(false);
   tree_layerprops->set_reorderable(false);
   tree_layerprops->set_enable_search(true);
   scrolledwindow6->set_flags(Gtk::CAN_FOCUS);
   scrolledwindow6->set_shadow_type(Gtk::SHADOW_IN);
   scrolledwindow6->set_policy(Gtk::POLICY_ALWAYS, Gtk::POLICY_ALWAYS);
   scrolledwindow6->property_window_placement().set_value(Gtk::CORNER_TOP_LEFT);
   scrolledwindow6->add(*tree_layerprops);
   label7->set_alignment(0.5,0.5);
   label7->set_padding(0,0);
   label7->set_justify(Gtk::JUSTIFY_LEFT);
   label7->set_line_wrap(false);
   label7->set_use_markup(false);
   label7->set_selectable(false);
   tree_tools->set_flags(Gtk::CAN_FOCUS);
   tree_tools->set_headers_visible(true);
   tree_tools->set_rules_hint(false);
   tree_tools->set_reorderable(false);
   tree_tools->set_enable_search(true);
   scrolledwindow7->set_flags(Gtk::CAN_FOCUS);
   scrolledwindow7->set_shadow_type(Gtk::SHADOW_IN);
   scrolledwindow7->set_policy(Gtk::POLICY_ALWAYS, Gtk::POLICY_ALWAYS);
   scrolledwindow7->property_window_placement().set_value(Gtk::CORNER_TOP_LEFT);
   scrolledwindow7->add(*tree_tools);
   label8->set_alignment(0.5,0.5);
   label8->set_padding(0,0);
   label8->set_justify(Gtk::JUSTIFY_LEFT);
   label8->set_line_wrap(false);
   label8->set_use_markup(false);
   label8->set_selectable(false);
   notebook1->set_flags(Gtk::CAN_FOCUS);
   notebook1->set_show_tabs(true);
   notebook1->set_show_border(true);
   notebook1->set_tab_pos(Gtk::POS_TOP);
   notebook1->set_scrollable(false);
   notebook1->append_page(*scrolledwindow5, *label6);
   notebook1->pages().back().set_tab_label_packing(false, true, Gtk::PACK_START);
   notebook1->append_page(*scrolledwindow6, *label7);
   notebook1->pages().back().set_tab_label_packing(false, true, Gtk::PACK_START);
   notebook1->append_page(*scrolledwindow7, *label8);
   notebook1->pages().back().set_tab_label_packing(false, true, Gtk::PACK_START);
   label29->set_alignment(0.5,0.5);
   label29->set_padding(0,0);
   label29->set_justify(Gtk::JUSTIFY_LEFT);
   label29->set_line_wrap(false);
   label29->set_use_markup(false);
   label29->set_selectable(false);
   alignment2->add(*label29);
   frame_default->set_shadow_type(Gtk::SHADOW_NONE);
   frame_default->set_label_align(0,0.5);
   frame_default->add(*alignment2);
   hpaned1->set_flags(Gtk::CAN_FOCUS);
   hpaned1->pack1(*notebook1, Gtk::AttachOptions(0));
   hpaned1->pack2(*frame_default, Gtk::EXPAND|Gtk::SHRINK);
   vbox1->pack_start(*menubar2, Gtk::PACK_SHRINK, 0);
   vbox1->pack_start(*toolbar, Gtk::PACK_SHRINK, 0);
   vbox1->pack_start(*hpaned1);
   vbox1->pack_start(*statusbar1, Gtk::PACK_SHRINK, 0);
   WindowMain->set_title(_("gcnccam"));
   WindowMain->set_default_size(500,400);
   WindowMain->set_modal(false);
   WindowMain->property_window_position().set_value(Gtk::WIN_POS_NONE);
   WindowMain->set_resizable(true);
   WindowMain->property_destroy_with_parent().set_value(false);
   WindowMain->add(*vbox1);
   open_template->show();
   save_template->show();
   separator2->show();
   open_drawing->show();
   separator3->show();
   save_cnc_file->show();
   separator4->show();
   export_tool_file1->show();
   separatormenuitem2->show();
   quit1->show();
   menuitem_file->show();
   save_template_default->show();
   settings->show();
   menu_item_edit->show();
   build_cnc_code->show();
   menuitem_build->show();
   about->show();
   menuitem_help->show();
   menubar2->show();
   image48->show();
   button_open_drawing->show();
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem14->show();
#endif //
   image30->show();
   button_save_cnc_code->show();
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem2->show();
#endif //
   image31->show();
   button_build_cnc->show();
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem3->show();
#endif //
   vseparator1->show();
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem5->show();
#endif //
   vseparator2->show();
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem8->show();
#endif //
   button_layerprop_add->show();
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem9->show();
#endif //
   button_layerprop_del->show();
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem10->show();
#endif //
   vseparator3->show();
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem11->show();
#endif //
   button_tool_add->show();
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem12->show();
#endif //
   button_tool_del->show();
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
   toolitem15->show();
#endif //
   toolbar->show();
   tree_layers->show();
   scrolledwindow5->show();
   label6->show();
   tree_layerprops->show();
   scrolledwindow6->show();
   label7->show();
   tree_tools->show();
   scrolledwindow7->show();
   label8->show();
   notebook1->show();
   label29->show();
   alignment2->show();
   frame_default->show();
   hpaned1->show();
   statusbar1->show();
   vbox1->show();
   WindowMain->show();
   open_template->signal_activate().connect(sigc::mem_fun(*this, &WindowMain_glade::on_open_template_activate), false);
   save_template->signal_activate().connect(sigc::mem_fun(*this, &WindowMain_glade::on_save_template_activate), false);
   open_drawing->signal_activate().connect(sigc::mem_fun(*this, &WindowMain_glade::on_open_drawing_activate), false);
   save_cnc_file->signal_activate().connect(sigc::mem_fun(*this, &WindowMain_glade::on_save_cnc_file_activate), false);
   export_tool_file1->signal_activate().connect(sigc::mem_fun(*this, &WindowMain_glade::on_export_tool_file1_activate), false);
   quit1->signal_activate().connect(sigc::mem_fun(*this, &WindowMain_glade::on_quit1_activate), false);
   save_template_default->signal_activate().connect(sigc::mem_fun(*this, &WindowMain_glade::on_save_template_default_activate), false);
   settings->signal_activate().connect(sigc::mem_fun(*this, &WindowMain_glade::on_settings_activate), false);
   build_cnc_code->signal_activate().connect(sigc::mem_fun(*this, &WindowMain_glade::on_build_cnc_code_activate), false);
   about->signal_activate().connect(sigc::mem_fun(*this, &WindowMain_glade::on_about_activate), false);
   button_open_drawing->signal_clicked().connect(sigc::mem_fun(*this, &WindowMain_glade::on_button_open_drawing_clicked), false);
   button_save_cnc_code->signal_clicked().connect(sigc::mem_fun(*this, &WindowMain_glade::on_button_save_cnc_code_clicked), false);
   button_build_cnc->signal_clicked().connect(sigc::mem_fun(*this, &WindowMain_glade::on_button_build_cnc_clicked), false);
   button_layerprop_add->signal_clicked().connect(sigc::mem_fun(*this, &WindowMain_glade::on_button_layerprop_add_clicked), false);
   button_layerprop_del->signal_clicked().connect(sigc::mem_fun(*this, &WindowMain_glade::on_button_layerprop_del_clicked), false);
   button_tool_add->signal_clicked().connect(sigc::mem_fun(*this, &WindowMain_glade::on_button_tool_add_clicked), false);
   button_tool_del->signal_clicked().connect(sigc::mem_fun(*this, &WindowMain_glade::on_button_tool_del_clicked), false);
   tree_layers->signal_row_activated().connect(sigc::mem_fun(*this, &WindowMain_glade::on_tree_layers_row_activated), false);
   tree_layerprops->signal_row_activated().connect(sigc::mem_fun(*this, &WindowMain_glade::on_tree_layerprops_row_activated), false);
   tree_tools->signal_row_activated().connect(sigc::mem_fun(*this, &WindowMain_glade::on_tree_tools_row_activated), false);
   notebook1->signal_switch_page().connect(sigc::mem_fun(*this, &WindowMain_glade::on_notebook1_switch_page), false);
}

WindowMain_glade::~WindowMain_glade()
{  delete gmm_data;
}
